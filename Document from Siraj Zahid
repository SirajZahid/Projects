{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e16f039a-74c0-4ee6-b9fe-8aa2c8323a01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Access Account\n",
      "3. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  Muhammad Mubashir Arif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Invalid choice. Please try again.\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Access Account\n",
      "3. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  1\n",
      "Enter account number:  03002981976\n",
      "Enter account name:  Muhammad Mubashir Arif\n",
      "Enter initial balance (default=0):  9000000000000000000000000000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Account created successfully.\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Access Account\n",
      "3. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exiting program. Goodbye!\n"
     ]
    }
   ],
   "source": [
    "class BankAccount:\n",
    "    def __init__(self, account_number, account_name, balance=0):\n",
    "        self.account_number = account_number\n",
    "        self.account_name = account_name\n",
    "        self.balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.balance += amount\n",
    "        print(f\"Deposit Successful. New balance is {self.balance}\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > self.balance:\n",
    "            print(\"Insufficient funds.\")\n",
    "        else:\n",
    "            self.balance -= amount\n",
    "            print(f\"Withdrawal Successful. New balance is {self.balance}\")\n",
    "\n",
    "    def display_details(self):\n",
    "        print(f\"Account Number: {self.account_number}\")\n",
    "        print(f\"Account Name: {self.account_name}\")\n",
    "        print(f\"Balance: {self.balance}\")\n",
    "\n",
    "class Bank:\n",
    "    def __init__(self):\n",
    "        self.accounts = {}\n",
    "\n",
    "    def create_account(self, account_number, account_name, initial_balance=0):\n",
    "        if account_number in self.accounts:\n",
    "            print(\"Account already exists.\")\n",
    "        else:\n",
    "            new_account = BankAccount(account_number, account_name, initial_balance)\n",
    "            self.accounts[account_number] = new_account\n",
    "            print(\"Account created successfully.\")\n",
    "\n",
    "    def access_account(self, account_number):\n",
    "        if account_number in self.accounts:\n",
    "            return self.accounts[account_number]\n",
    "        else:\n",
    "            print(\"Account does not exist.\")\n",
    "\n",
    "def main():\n",
    "    bank = Bank()\n",
    "\n",
    "    while True:\n",
    "        print(\"\\nBanking System Menu:\")\n",
    "        print(\"1. Create Account\")\n",
    "        print(\"2. Access Account\")\n",
    "        print(\"3. Exit\")\n",
    "\n",
    "        choice = input(\"Enter your choice: \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            account_number = input(\"Enter account number: \")\n",
    "            account_name = input(\"Enter account name: \")\n",
    "            initial_balance = float(input(\"Enter initial balance (default=0): \") or 0)\n",
    "            bank.create_account(account_number, account_name, initial_balance)\n",
    "        elif choice == \"2\":\n",
    "            account_number = input(\"Enter account number: \")\n",
    "            account = bank.access_account(account_number)\n",
    "            if account:\n",
    "                while True:\n",
    "                    print(\"\\nAccount Menu:\")\n",
    "                    print(\"1. Deposit\")\n",
    "                    print(\"2. Withdraw\")\n",
    "                    print(\"3. Display Details\")\n",
    "                    print(\"4. Exit\")\n",
    "\n",
    "                    choice = input(\"Enter your choice: \")\n",
    "\n",
    "                    if choice == \"1\":\n",
    "                        amount = float(input(\"Enter amount to deposit: \"))\n",
    "                        account.deposit(amount)\n",
    "                    elif choice == \"2\":\n",
    "                        amount = float(input(\"Enter amount to withdraw: \"))\n",
    "                        account.withdraw(amount)\n",
    "                    elif choice == \"3\":\n",
    "                        account.display_details()\n",
    "                    elif choice == \"4\":\n",
    "                        break\n",
    "                    else:\n",
    "                        print(\"Invalid choice. Please try again.\")\n",
    "        elif choice == \"3\":\n",
    "            print(\"Exiting program. Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
